/* -------------------------------------------------------------------------------

   Copyright (C) 2022-2023 MRVN-Radiant and contributors.
   For a list of contributors, see the accompanying CONTRIBUTORS file.

   This file is part of MRVN-Radiant.

   MRVN-Radiant is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   MRVN-Radiant is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GtkRadiant; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   ------------------------------------------------------------------------------- */


/* dependencies */
#include "../bspfile_abstract.h"
#include <algorithm>
#include <ctime>


/*
   WriteR2BSPFile()
   writes a r1 bsp file
*/
void WriteR1BSPFile(const char *filename) {
    BSPHeader_t  header {};

    // Set up header
    memcpy(header.ident, g_pGame->bspIdent, 4);
    header.version = LittleLong(g_pGame->bspVersion);
    header.mapVersion = 6;
    header.lastLump = 127;

    // This should be automated maybe
    header.lumps[0x02].lumpVer = 1;
    header.lumps[0x36].lumpVer = 1;
    header.lumps[0x49].lumpVer = 1;
    header.lumps[0x53].lumpVer = 1;

    // write initial header
    FILE *file = SafeOpenWrite(filename);
    SafeWrite(file, &header, sizeof(header));

    {
        char message[64] = REMAP_MOTD;
        SafeWrite(file, &message, sizeof(message));
    }
    {
        char message[64];
        strncpy(message,StringOutputStream(64)("Version:        ", Q3MAP_VERSION).c_str(), 63);
        SafeWrite(file, &message, sizeof(message));
    }
    {
        time_t t;
        time(&t);
        char message[64];
        strncpy(message,StringOutputStream(64)("Time:           ", asctime(localtime(&t))).c_str(), 63);
        SafeWrite(file, &message, sizeof(message));
    }

    /* Write lumps */
    AddLump(file, header.lumps[R1_LUMP_ENTITIES],          Titanfall::Bsp::entities);
    AddLump(file, header.lumps[R1_LUMP_PLANES],            Titanfall::Bsp::planes);
    AddLump(file, header.lumps[R1_LUMP_TEXTURE_DATA],      Titanfall::Bsp::textureData);
    AddLump(file, header.lumps[R1_LUMP_VERTICES],          Titanfall::Bsp::vertices);
    AddLump(file, header.lumps[R1_LUMP_MODELS],            Titanfall::Bsp::models);
    AddLump(file, header.lumps[R1_LUMP_ENTITY_PARTITIONS], Titanfall::Bsp::entityPartitions);
    AddLump(file, header.lumps[R1_LUMP_PHYSICS_COLLIDE],   Titanfall::Bsp::physicsCollide_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_VERTEX_NORMALS],    Titanfall::Bsp::vertexNormals);
    // GameLump
    {
        header.lumps[R1_LUMP_GAME_LUMP].offset = ftell(file);
        header.lumps[R1_LUMP_GAME_LUMP].length = sizeof(Titanfall::GameLumpHeader_t)
                                               + sizeof(Titanfall::GameLumpPathHeader_t)
                                               + sizeof(Titanfall::GameLumpPath_t) * Titanfall::Bsp::gameLumpPathHeader.numPaths
                                               + sizeof(Titanfall::GameLumpPropHeader_t)
                                               + sizeof(Titanfall::GameLumpProp_t) * Titanfall::Bsp::gameLumpPropHeader.numProps
                                               + sizeof(Titanfall::GameLumpUnknownHeader_t);

        Titanfall::Bsp::gameLumpHeader.offset = ftell(file) + sizeof(Titanfall::GameLumpHeader_t);
        Titanfall::Bsp::gameLumpHeader.length = sizeof(Titanfall::GameLumpPathHeader_t)
                                               + sizeof(Titanfall::GameLumpPath_t) * Titanfall::Bsp::gameLumpPathHeader.numPaths
                                               + sizeof(Titanfall::GameLumpPropHeader_t)
                                               + sizeof(Titanfall::GameLumpProp_t) * Titanfall::Bsp::gameLumpPropHeader.numProps
                                               + sizeof(Titanfall::GameLumpUnknownHeader_t);

        SafeWrite(file, &Titanfall::Bsp::gameLumpHeader, sizeof(Titanfall::GameLumpHeader_t));
        SafeWrite(file, &Titanfall::Bsp::gameLumpPathHeader, sizeof(Titanfall::GameLumpPathHeader_t));
        SafeWrite(file, Titanfall::Bsp::gameLumpPaths.data(), sizeof(Titanfall::GameLumpPath_t) * Titanfall::Bsp::gameLumpPaths.size());
        SafeWrite(file, &Titanfall::Bsp::gameLumpPropHeader, sizeof(Titanfall::GameLumpPropHeader_t));
        SafeWrite(file, Titanfall::Bsp::gameLumpProps.data(), sizeof(Titanfall::GameLumpProp_t) * Titanfall::Bsp::gameLumpProps.size());
        SafeWrite(file, &Titanfall::Bsp::gameLumpUnknownHeader, sizeof(Titanfall::GameLumpUnknownHeader_t));
    }
    AddLump(file, header.lumps[R1_LUMP_TEXTURE_DATA_STRING_DATA],    Titanfall::Bsp::textureDataData);
    AddLump(file, header.lumps[R1_LUMP_TEXTURE_DATA_STRING_TABLE],   Titanfall::Bsp::textureDataTable);
    AddLump(file, header.lumps[R1_LUMP_WORLD_LIGHTS],                Titanfall::Bsp::worldLights_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_VERTEX_UNLIT],                Titanfall::Bsp::vertexUnlitVertices);
    AddLump(file, header.lumps[R1_LUMP_VERTEX_LIT_FLAT],             Titanfall::Bsp::vertexLitFlatVertices);
    AddLump(file, header.lumps[R1_LUMP_VERTEX_LIT_BUMP],             Titanfall::Bsp::vertexLitBumpVertices);
    AddLump(file, header.lumps[R1_LUMP_VERTEX_UNLIT_TS],             Titanfall::Bsp::vertexUnlitTSVertices);
    AddLump(file, header.lumps[R1_LUMP_VERTEX_BLINN_PHONG],          Titanfall::Bsp::vertexBlinnPhongVertices);
    AddLump(file, header.lumps[R1_LUMP_MESH_INDICES],                Titanfall::Bsp::meshIndices);
    AddLump(file, header.lumps[R1_LUMP_MESHES],                      Titanfall::Bsp::meshes);
    AddLump(file, header.lumps[R1_LUMP_MESH_BOUNDS],                 Titanfall::Bsp::meshBounds);
    AddLump(file, header.lumps[R1_LUMP_MATERIAL_SORT],               Titanfall::Bsp::materialSorts);
    AddLump(file, header.lumps[R1_LUMP_LIGHTMAP_HEADERS],            Titanfall::Bsp::lightmapHeaders_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_CM_GRID],                     Titanfall::Bsp::cmGrid);
    AddLump(file, header.lumps[R1_LUMP_CM_GRID_CELLS],               Titanfall::Bsp::cmGridCells);
    AddLump(file, header.lumps[R1_LUMP_CM_GEO_SETS],                 Titanfall::Bsp::cmGeoSets);
    AddLump(file, header.lumps[R1_LUMP_CM_GEO_SET_BOUNDS],           Titanfall::Bsp::cmGeoSetBounds);
    AddLump(file, header.lumps[R1_LUMP_CM_UNIQUE_CONTENTS],          Titanfall::Bsp::cmUniqueContents);
    AddLump(file, header.lumps[R1_LUMP_CM_BRUSHES],                  Titanfall::Bsp::cmBrushes);
    AddLump(file, header.lumps[R1_LUMP_CM_BRUSH_SIDE_PROPS],         Titanfall::Bsp::cmBrushSideProperties);
    AddLump(file, header.lumps[R1_LUMP_CM_BRUSH_SIDE_PLANE_OFFSETS], Titanfall::Bsp::cmBrushSidePlaneOffsets);
    AddLump(file, header.lumps[R1_LUMP_LIGHTMAP_DATA_SKY],           Titanfall::Bsp::lightMapDataSky_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_CSM_AABB_NODES],              Titanfall::Bsp::csmAABBNodes_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_CELL_BSP_NODES],              Titanfall::Bsp::cellBSPNodes_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_CELLS],                       Titanfall::Bsp::cells_stub);  // stub
    AddLump(file, header.lumps[R1_LUMP_OCCLUSION_MESH_VERTICES],     Titanfall::Bsp::occlusionMeshVertices);
    AddLump(file, header.lumps[R1_LUMP_OCCLUSION_MESH_INDICES],      Titanfall::Bsp::occlusionMeshIndices);
    AddLump(file, header.lumps[R1_LUMP_CELL_AABB_NODES],             Titanfall::Bsp::cellAABBNodes);
    AddLump(file, header.lumps[R1_LUMP_OBJ_REFERENCES],              Titanfall::Bsp::objReferences);
    AddLump(file, header.lumps[R1_LUMP_OBJ_REFERENCE_BOUNDS],        Titanfall::Bsp::objReferenceBounds);
    AddLump(file, header.lumps[R1_LUMP_LEVEL_INFO],                  Titanfall::Bsp::levelInfo);

    /* emit bsp size */
    const int size = ftell(file);
    Sys_Printf("Wrote %.1f MB (%d bytes)\n", (float)size / (1024 * 1024), size);

    /* write the completed header */
    fseek(file, 0, SEEK_SET);
    SafeWrite(file, &header, sizeof(header));

    /* close the file */
    fclose(file);
}


/*
    CompileR1BSPFile
    Compiles a Titanfall 1 bsp file and sorts entition into ent files
*/
void CompileR1BSPFile() {
    Titanfall::SetupGameLump();

    for (entity_t &entity : entities) {
        const char *pszClassname = entity.classname();

        #define ENT_IS(classname) striEqual(pszClassname, classname)

        // Visible geo
        if (ENT_IS("worldspawn")) { // "worldspawn" is most of the map, should always be the 1st entity
            Titanfall::BeginModel(entity);

            Shared::MakeMeshes(entity);
            Shared::MakeVisReferences();

            Titanfall::EmitMeshes(entity);

            Titanfall::EmitCollisionGrid(entity);

            Titanfall::EmitLevelInfoWorldspawn();

            Titanfall::EndModel();
        } else if (ENT_IS("prop_static")) { // Compile as static props into gamelump
            // TODO: use prop_static instead
            Titanfall::EmitStaticProp(entity);
            continue; // Don't emit as entity
        } else if (ENT_IS("func_occluder")) {
            Titanfall::EmitOcclusionMeshes( entity );
            continue; // Don't emit as entity
        } else {
            if( entity.brushes.size() ) {
                Titanfall::BeginModel(entity);
                Shared::MakeMeshes(entity);
                Titanfall::EmitMeshes(entity);
                Titanfall::EmitModelGridCell(entity);
                Titanfall::EndModel();
            }
        }

        Titanfall::EmitEntity(entity);

        #undef ENT_IS
    }

    // Write entity partitions we used
    Titanfall::EmitEntityPartitions();

    // Generate vis tree for worldspawn, we do this here as we'll need portals once we reverse further
    Shared::visRoot = Shared::MakeVisTree(Shared::visRefs, 1e30f);
    Shared::MergeVisTree(Shared::visRoot);
    Titanfall::EmitVisTree();

    // Emit level info
    Titanfall::EmitLevelInfo();

    // Emit lumps we dont generate yet, but need for the map to load
    Titanfall::EmitStubs();
}




/*
    EmitStubs
    Emits the lumps we cant generate yet, but need for the map to boot
*/
void Titanfall::EmitStubs() {
    {  // Physics Collide
        constexpr std::array<uint8_t, 2315> data = {
            0x00, 0x00, 0x00, 0x00, 0x64, 0x08, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x60, 0x08, 0x00, 0x00, 0x56, 0x50, 0x48, 0x59, 0x00, 0x01, 0x00, 0x00, 0x44, 0x08, 0x00, 0x00,
            0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
            0x4D, 0x58, 0x3C, 0xB4, 0x23, 0x51, 0xF1, 0xB4, 0x94, 0x00, 0xCE, 0xB3, 0x8E, 0x46, 0x99, 0x41,
            0x8E, 0x46, 0x99, 0x41, 0x8E, 0x46, 0x99, 0x41, 0x7A, 0x0D, 0x09, 0x41, 0xCE, 0x44, 0x08, 0x00,
            0x10, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x56, 0x50, 0x53,
            0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x00, 0xB0, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x0F, 0x00, 0x02, 0x00, 0x08, 0x00,
            0x01, 0xA0, 0x00, 0x01, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x1B, 0x00, 0x01, 0x00, 0xFA, 0x7F,
            0x02, 0x90, 0x00, 0x02, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x13, 0x00, 0x00, 0x00, 0xF8, 0x7F,
            0x03, 0x80, 0x00, 0x02, 0x02, 0x00, 0x06, 0x00, 0x05, 0x00, 0x20, 0x00, 0x04, 0x00, 0xFA, 0x7F,
            0x04, 0x70, 0x00, 0x01, 0x02, 0x00, 0xF1, 0x7F, 0x01, 0x00, 0x03, 0x00, 0x05, 0x00, 0xFA, 0x7F,
            0x05, 0x60, 0x00, 0x01, 0x05, 0x00, 0xFD, 0x7F, 0x01, 0x00, 0x0D, 0x00, 0x06, 0x00, 0x18, 0x00,
            0x06, 0x50, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x03, 0x00, 0xEA, 0x7F,
            0x07, 0x40, 0x00, 0x01, 0x00, 0x00, 0xED, 0x7F, 0x04, 0x00, 0x0B, 0x00, 0x07, 0x00, 0xFA, 0x7F,
            0x08, 0x30, 0x00, 0x01, 0x01, 0x00, 0xE5, 0x7F, 0x03, 0x00, 0x03, 0x00, 0x06, 0x00, 0xF3, 0x7F,
            0x09, 0x20, 0x00, 0x01, 0x06, 0x00, 0xFD, 0x7F, 0x03, 0x00, 0xF4, 0x7F, 0x07, 0x00, 0x04, 0x00,
            0x0A, 0x10, 0x00, 0x01, 0x07, 0x00, 0xF5, 0x7F, 0x04, 0x00, 0x03, 0x00, 0x06, 0x00, 0xFC, 0x7F,
            0x0B, 0x00, 0x00, 0x01, 0x06, 0x00, 0xFD, 0x7F, 0x04, 0x00, 0xE0, 0x7F, 0x05, 0x00, 0xE8, 0x7F,
            0x10, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x00, 0xB0, 0x00, 0x02, 0x08, 0x00, 0x06, 0x00, 0x09, 0x00, 0x0F, 0x00, 0x0A, 0x00, 0x08, 0x00,
            0x01, 0xA0, 0x00, 0x02, 0x08, 0x00, 0x16, 0x00, 0x0B, 0x00, 0x1B, 0x00, 0x09, 0x00, 0xFA, 0x7F,
            0x02, 0x90, 0x00, 0x01, 0x0A, 0x00, 0x06, 0x00, 0x03, 0x00, 0x13, 0x00, 0x08, 0x00, 0xF8, 0x7F,
            0x03, 0x80, 0x00, 0x01, 0x0A, 0x00, 0x06, 0x00, 0x01, 0x00, 0x20, 0x00, 0x03, 0x00, 0xFA, 0x7F,
            0x04, 0x70, 0x00, 0x01, 0x0A, 0x00, 0xF1, 0x7F, 0x09, 0x00, 0x03, 0x00, 0x01, 0x00, 0xFA, 0x7F,
            0x05, 0x60, 0x00, 0x01, 0x01, 0x00, 0xFD, 0x7F, 0x09, 0x00, 0x0D, 0x00, 0x0C, 0x00, 0x18, 0x00,
            0x06, 0x50, 0x00, 0x01, 0x08, 0x00, 0x06, 0x00, 0x0D, 0x00, 0x0C, 0x00, 0x0B, 0x00, 0xEA, 0x7F,
            0x07, 0x40, 0x00, 0x01, 0x08, 0x00, 0xED, 0x7F, 0x03, 0x00, 0x0B, 0x00, 0x0D, 0x00, 0xFA, 0x7F,
            0x08, 0x30, 0x00, 0x01, 0x09, 0x00, 0xE5, 0x7F, 0x0B, 0x00, 0x03, 0x00, 0x0C, 0x00, 0xF3, 0x7F,
            0x09, 0x20, 0x00, 0x01, 0x0C, 0x00, 0xFD, 0x7F, 0x0B, 0x00, 0xF4, 0x7F, 0x0D, 0x00, 0x04, 0x00,
            0x0A, 0x10, 0x00, 0x01, 0x0D, 0x00, 0xF5, 0x7F, 0x03, 0x00, 0x03, 0x00, 0x0C, 0x00, 0xFC, 0x7F,
            0x0B, 0x00, 0x00, 0x01, 0x0C, 0x00, 0xFD, 0x7F, 0x03, 0x00, 0xE0, 0x7F, 0x01, 0x00, 0xE8, 0x7F,
            0x40, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x00, 0xB0, 0x00, 0x01, 0x0E, 0x00, 0x06, 0x00, 0x0D, 0x00, 0x0F, 0x00, 0x03, 0x00, 0x08, 0x00,
            0x01, 0xA0, 0x00, 0x01, 0x0E, 0x00, 0x16, 0x00, 0x0F, 0x00, 0x1B, 0x00, 0x0D, 0x00, 0xFA, 0x7F,
            0x02, 0x90, 0x00, 0x01, 0x03, 0x00, 0x06, 0x00, 0x10, 0x00, 0x13, 0x00, 0x0E, 0x00, 0xF8, 0x7F,
            0x03, 0x80, 0x00, 0x01, 0x03, 0x00, 0x06, 0x00, 0x07, 0x00, 0x20, 0x00, 0x10, 0x00, 0xFA, 0x7F,
            0x04, 0x70, 0x00, 0x01, 0x03, 0x00, 0xF1, 0x7F, 0x0D, 0x00, 0x03, 0x00, 0x07, 0x00, 0xFA, 0x7F,
            0x05, 0x60, 0x00, 0x01, 0x07, 0x00, 0xFD, 0x7F, 0x0D, 0x00, 0x0D, 0x00, 0x11, 0x00, 0x18, 0x00,
            0x06, 0x50, 0x00, 0x02, 0x0E, 0x00, 0x06, 0x00, 0x12, 0x00, 0x0C, 0x00, 0x0F, 0x00, 0xEA, 0x7F,
            0x07, 0x40, 0x00, 0x02, 0x0E, 0x00, 0xED, 0x7F, 0x10, 0x00, 0x0B, 0x00, 0x12, 0x00, 0xFA, 0x7F,
            0x08, 0x30, 0x00, 0x01, 0x0D, 0x00, 0xE5, 0x7F, 0x0F, 0x00, 0x03, 0x00, 0x11, 0x00, 0xF3, 0x7F,
            0x09, 0x20, 0x00, 0x01, 0x11, 0x00, 0xFD, 0x7F, 0x0F, 0x00, 0xF4, 0x7F, 0x12, 0x00, 0x04, 0x00,
            0x0A, 0x10, 0x00, 0x01, 0x12, 0x00, 0xF5, 0x7F, 0x10, 0x00, 0x03, 0x00, 0x11, 0x00, 0xFC, 0x7F,
            0x0B, 0x00, 0x00, 0x01, 0x11, 0x00, 0xFD, 0x7F, 0x10, 0x00, 0xE0, 0x7F, 0x07, 0x00, 0xE8, 0x7F,
            0x70, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x00, 0xB0, 0x00, 0x01, 0x0D, 0x00, 0x06, 0x00, 0x13, 0x00, 0x0F, 0x00, 0x0C, 0x00, 0x08, 0x00,
            0x01, 0xA0, 0x00, 0x01, 0x0D, 0x00, 0x16, 0x00, 0x14, 0x00, 0x1B, 0x00, 0x13, 0x00, 0xFA, 0x7F,
            0x02, 0x90, 0x00, 0x01, 0x0C, 0x00, 0x06, 0x00, 0x11, 0x00, 0x13, 0x00, 0x0D, 0x00, 0xF8, 0x7F,
            0x03, 0x80, 0x00, 0x01, 0x0C, 0x00, 0x06, 0x00, 0x15, 0x00, 0x20, 0x00, 0x11, 0x00, 0xFA, 0x7F,
            0x04, 0x70, 0x00, 0x01, 0x0C, 0x00, 0xF1, 0x7F, 0x13, 0x00, 0x03, 0x00, 0x15, 0x00, 0xFA, 0x7F,
            0x05, 0x60, 0x00, 0x01, 0x15, 0x00, 0xFD, 0x7F, 0x13, 0x00, 0x0D, 0x00, 0x16, 0x00, 0x18, 0x00,
            0x06, 0x50, 0x00, 0x01, 0x0D, 0x00, 0x06, 0x00, 0x17, 0x00, 0x0C, 0x00, 0x14, 0x00, 0xEA, 0x7F,
            0x07, 0x40, 0x00, 0x01, 0x0D, 0x00, 0xED, 0x7F, 0x11, 0x00, 0x0B, 0x00, 0x17, 0x00, 0xFA, 0x7F,
            0x08, 0x30, 0x00, 0x02, 0x13, 0x00, 0xE5, 0x7F, 0x14, 0x00, 0x03, 0x00, 0x16, 0x00, 0xF3, 0x7F,
            0x09, 0x20, 0x00, 0x02, 0x16, 0x00, 0xFD, 0x7F, 0x14, 0x00, 0xF4, 0x7F, 0x17, 0x00, 0x04, 0x00,
            0x0A, 0x10, 0x00, 0x01, 0x17, 0x00, 0xF5, 0x7F, 0x11, 0x00, 0x03, 0x00, 0x16, 0x00, 0xFC, 0x7F,
            0x0B, 0x00, 0x00, 0x01, 0x16, 0x00, 0xFD, 0x7F, 0x11, 0x00, 0xE0, 0x7F, 0x15, 0x00, 0xE8, 0x7F,
            0xA0, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x00, 0xB0, 0x00, 0x01, 0x07, 0x00, 0x06, 0x00, 0x15, 0x00, 0x0F, 0x00, 0x06, 0x00, 0x08, 0x00,
            0x01, 0xA0, 0x00, 0x01, 0x07, 0x00, 0x16, 0x00, 0x11, 0x00, 0x1B, 0x00, 0x15, 0x00, 0xFA, 0x7F,
            0x02, 0x90, 0x00, 0x01, 0x06, 0x00, 0x06, 0x00, 0x18, 0x00, 0x13, 0x00, 0x07, 0x00, 0xF8, 0x7F,
            0x03, 0x80, 0x00, 0x01, 0x06, 0x00, 0x06, 0x00, 0x19, 0x00, 0x20, 0x00, 0x18, 0x00, 0xFA, 0x7F,
            0x04, 0x70, 0x00, 0x01, 0x06, 0x00, 0xF1, 0x7F, 0x15, 0x00, 0x03, 0x00, 0x19, 0x00, 0xFA, 0x7F,
            0x05, 0x60, 0x00, 0x01, 0x19, 0x00, 0xFD, 0x7F, 0x15, 0x00, 0x0D, 0x00, 0x1A, 0x00, 0x18, 0x00,
            0x06, 0x50, 0x00, 0x01, 0x07, 0x00, 0x06, 0x00, 0x1B, 0x00, 0x0C, 0x00, 0x11, 0x00, 0xEA, 0x7F,
            0x07, 0x40, 0x00, 0x01, 0x07, 0x00, 0xED, 0x7F, 0x18, 0x00, 0x0B, 0x00, 0x1B, 0x00, 0xFA, 0x7F,
            0x08, 0x30, 0x00, 0x01, 0x15, 0x00, 0xE5, 0x7F, 0x11, 0x00, 0x03, 0x00, 0x1A, 0x00, 0xF3, 0x7F,
            0x09, 0x20, 0x00, 0x01, 0x1A, 0x00, 0xFD, 0x7F, 0x11, 0x00, 0xF4, 0x7F, 0x1B, 0x00, 0x04, 0x00,
            0x0A, 0x10, 0x00, 0x02, 0x1B, 0x00, 0xF5, 0x7F, 0x18, 0x00, 0x03, 0x00, 0x1A, 0x00, 0xFC, 0x7F,
            0x0B, 0x00, 0x00, 0x02, 0x1A, 0x00, 0xFD, 0x7F, 0x18, 0x00, 0xE0, 0x7F, 0x19, 0x00, 0xE8, 0x7F,
            0xD0, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
            0x00, 0xB0, 0x00, 0x01, 0x01, 0x00, 0x06, 0x00, 0x1C, 0x00, 0x0F, 0x00, 0x1D, 0x00, 0x08, 0x00,
            0x01, 0xA0, 0x00, 0x01, 0x01, 0x00, 0x16, 0x00, 0x0C, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0xFA, 0x7F,
            0x02, 0x90, 0x00, 0x01, 0x1D, 0x00, 0x06, 0x00, 0x06, 0x00, 0x13, 0x00, 0x01, 0x00, 0xF8, 0x7F,
            0x03, 0x80, 0x00, 0x01, 0x1D, 0x00, 0x06, 0x00, 0x1E, 0x00, 0x20, 0x00, 0x06, 0x00, 0xFA, 0x7F,
            0x04, 0x70, 0x00, 0x02, 0x1D, 0x00, 0xF1, 0x7F, 0x1C, 0x00, 0x03, 0x00, 0x1E, 0x00, 0xFA, 0x7F,
            0x05, 0x60, 0x00, 0x02, 0x1E, 0x00, 0xFD, 0x7F, 0x1C, 0x00, 0x0D, 0x00, 0x1F, 0x00, 0x18, 0x00,
            0x06, 0x50, 0x00, 0x01, 0x01, 0x00, 0x06, 0x00, 0x15, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0xEA, 0x7F,
            0x07, 0x40, 0x00, 0x01, 0x01, 0x00, 0xED, 0x7F, 0x06, 0x00, 0x0B, 0x00, 0x15, 0x00, 0xFA, 0x7F,
            0x08, 0x30, 0x00, 0x01, 0x1C, 0x00, 0xE5, 0x7F, 0x0C, 0x00, 0x03, 0x00, 0x1F, 0x00, 0xF3, 0x7F,
            0x09, 0x20, 0x00, 0x01, 0x1F, 0x00, 0xFD, 0x7F, 0x0C, 0x00, 0xF4, 0x7F, 0x15, 0x00, 0x04, 0x00,
            0x0A, 0x10, 0x00, 0x01, 0x15, 0x00, 0xF5, 0x7F, 0x06, 0x00, 0x03, 0x00, 0x1F, 0x00, 0xFC, 0x7F,
            0x0B, 0x00, 0x00, 0x01, 0x1F, 0x00, 0xFD, 0x7F, 0x06, 0x00, 0xE0, 0x7F, 0x1E, 0x00, 0xE8, 0x7F,
            0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x5C, 0x8F, 0xA2, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x5C, 0x8F, 0xA2, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0x5C, 0x8F, 0xA2, 0xC0, 0xBF, 0x0E, 0x9C, 0x40, 0xBF, 0x0E, 0x9C, 0xC0, 0x00, 0x00, 0x00, 0x00,
            0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x1F, 0x06, 0x0D, 0x41, 0x91, 0x91, 0x91, 0x00, 0x70, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xA0, 0x32, 0xD2, 0x3D, 0xA0, 0x32, 0xD2, 0xBD, 0xA0, 0x32, 0xD2, 0xBD,
            0xF9, 0x2D, 0x0A, 0x41, 0x91, 0x91, 0x91, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xA0, 0x32, 0xD2, 0xBD, 0xA0, 0x32, 0xD2, 0xBD, 0xEF, 0x3C, 0x09, 0x41,
            0x8F, 0x92, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xF8, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x4F, 0x9F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB9, 0xDC, 0x40, 0xB1, 0x04, 0xB1, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xF0, 0xFB, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x4F, 0x9F, 0xC0, 0x04, 0xB9, 0xDC, 0x40, 0xB1, 0xB1, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x34, 0xFA, 0xFF, 0xFF, 0x0E, 0x4F, 0x9F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0xB9, 0xDC, 0x40, 0x04, 0xB1, 0xB1, 0x02, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xA0, 0x32, 0xD2, 0xBD, 0xA0, 0x32, 0xD2, 0x3D, 0xA0, 0x32, 0xD2, 0x3D, 0xF9, 0x2D, 0x0A, 0x41,
            0x91, 0x91, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0xFC, 0xFF, 0xFF, 0x0E, 0x4F, 0x9F, 0xC0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB9, 0xDC, 0x40, 0x04, 0xB1, 0xB1, 0x03,
            0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x32, 0xD2, 0x3D,
            0xA0, 0x32, 0xD2, 0x3D, 0xEF, 0x3C, 0x09, 0x41, 0x8F, 0x92, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xF4, 0xF8, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x4F, 0x9F, 0x40,
            0x04, 0xB9, 0xDC, 0x40, 0xB1, 0xB1, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x78, 0xFA, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0x0E, 0x4F, 0x9F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB9, 0xDC, 0x40,
            0xB1, 0x04, 0xB1, 0x05, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x6F, 0x6C, 0x69, 0x64, 0x20,
            0x7B, 0x0A, 0x22, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x22, 0x20, 0x22, 0x30, 0x22, 0x0A, 0x22, 0x63,
            0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x73, 0x22, 0x20, 0x22, 0x33, 0x33, 0x35, 0x37, 0x30, 0x38,
            0x31, 0x39, 0x22, 0x0A, 0x7D, 0x0A, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C, 0x74, 0x65, 0x72,
            0x72, 0x61, 0x69, 0x6E, 0x20, 0x7B, 0x7D, 0x0A, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C, 0x74,
            0x72, 0x69, 0x6D, 0x65, 0x73, 0x68, 0x65, 0x73, 0x20, 0x7B, 0x7D, 0x0A, 0x6D, 0x61, 0x74, 0x65,
            0x72, 0x69, 0x61, 0x6C, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x7B, 0x0A, 0x22, 0x64, 0x65, 0x66,
            0x61, 0x75, 0x6C, 0x74, 0x22, 0x20, 0x22, 0x31, 0x22, 0x0A, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75,
            0x6C, 0x74, 0x22, 0x20, 0x22, 0x32, 0x22, 0x0A, 0x7D, 0x0A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        Titanfall::Bsp::physicsCollide_stub = { data.begin(), data.end() };
    }
    {  // GameLump
        constexpr std::array<uint8_t, 40> data = {
            0x01, 0x00, 0x00, 0x00, 0x70, 0x72, 0x70, 0x73, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x26, 0x0C, 0x00,
            0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        Titanfall::Bsp::gameLump_stub = { data.begin(), data.end() };
    }
    {  // World lights
        constexpr std::array<uint8_t, 200> data = {
            0x00, 0x00, 0x20, 0xC2, 0x00, 0x00, 0x20, 0x42, 0x00, 0x00, 0xD0, 0x42, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x52, 0x15, 0x3F, 0x66, 0x0E, 0xFE, 0xBE,
            0x5B, 0xA1, 0x24, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x42, 0x00, 0x00, 0x40, 0x42, 0x00, 0x00, 0xD0, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x43,
            0x00, 0x00, 0x80, 0x3F, 0x87, 0x40, 0xD5, 0xBB, 0x63, 0x89, 0x31, 0x37, 0x06, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        Titanfall::Bsp::worldLights_stub = { data.begin(), data.end() };
    }
    {  // Lightmap headers
        constexpr std::array<uint8_t, 8> data = {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00
        };
        Titanfall::Bsp::lightmapHeaders_stub = { data.begin(), data.end() };
    }
    {  // LightMap Data Sky
        for (std::size_t i = 0; i < 524288; i++) {
            Titanfall::Bsp::lightMapDataSky_stub.emplace_back(0);
        }
    }
    {  // CSM AABB Nodes
        constexpr std::array<uint8_t, 32> data = {
            0x71, 0xFD, 0x3F, 0xC3, 0x71, 0xFD, 0x3F, 0xC3, 0x71, 0xFD, 0x3F, 0xC3, 0x00, 0x00, 0x00, 0x00,
            0x71, 0xFD, 0x3F, 0x43, 0x71, 0xFD, 0x3F, 0x43, 0x71, 0xFD, 0x3F, 0x43, 0x00, 0x00, 0x00, 0x00
        };
        Titanfall::Bsp::csmAABBNodes_stub = { data.begin(), data.end() };
    }
    {  // Cell BSP Nodes
        constexpr std::array<uint8_t, 8> data = {
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
        };
        Titanfall::Bsp::cellBSPNodes_stub = { data.begin(), data.end() };
    }
    {  // Cells
        constexpr std::array<uint8_t, 8> data = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF
        };
        Titanfall::Bsp::cells_stub = { data.begin(), data.end() };
    }
}

